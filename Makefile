.PHONY: install test build clean dist package help oauth-help oauth-test oauth-setup oauth-extension-id oauth-debug oauth-troubleshoot oauth-fix-redirect oauth-fix-client-id oauth-update-client-id validate-store prepare-store-assets store-help

# Default target
all: install build

# Install dependencies
install:
	npm install

# Test the project (no tests currently defined in package.json)
test:
	@echo "No tests currently defined in package.json"

# Build the project (outputs to dist folder)
build:
	npm run build
	npm run dist
	@echo "Build completed - files available in dist/ folder"

# Clean build artifacts
clean:
	npm run clean
	rm -f background.js index.js chronomark-extension.zip

# Create distribution folder with only necessary extension files
dist:
	npm run dist

# Package the extension for distribution
package: build
	@echo "üì¶ Criando pacote para Chrome Web Store..."
	@mkdir -p dist
	@echo "üìã Verificando arquivos obrigat√≥rios..."
	@test -f dist/manifest.json || (echo "‚ùå manifest.json n√£o encontrado" && exit 1)
	@test -f dist/index.html || (echo "‚ùå index.html n√£o encontrado" && exit 1)
	@test -f dist/icon16.png || (echo "‚ùå icon16.png n√£o encontrado" && exit 1)
	@test -f dist/icon48.png || (echo "‚ùå icon48.png n√£o encontrado" && exit 1)
	@test -f dist/icon128.png || (echo "‚ùå icon128.png n√£o encontrado" && exit 1)
	@echo "‚úÖ Todos os arquivos obrigat√≥rios encontrados"
	@cd dist && zip -r ../chronomark-extension.zip . -x "*.DS_Store" "*.git*" "*.map" "node_modules/*"
	@echo "‚úÖ Pacote criado: chronomark-extension.zip"
	@ls -lh chronomark-extension.zip
	@echo "üìã Pr√≥ximo passo: Acesse https://chrome.google.com/webstore/devconsole/"

# OAuth setup and troubleshooting commands
oauth-help:
	@echo "OAuth Setup and Troubleshooting Commands:"
	@echo "  oauth-help   - Show OAuth help and setup instructions"
	@echo "  oauth-test   - Open OAuth test page in browser"
	@echo "  oauth-setup  - Show OAuth configuration steps"
	@echo ""
	@echo "If you're getting 'redirect_uri_mismatch' error:"
	@echo "1. Load the extension in Chrome (Developer mode)"
	@echo "2. Copy the Extension ID from chrome://extensions/"
	@echo "3. Add this redirect URI in Google Cloud Console:"
	@echo "   https://YOUR_EXTENSION_ID.chromiumapp.org/"
	@echo ""
	@echo "For detailed instructions, see: OAUTH_SETUP.md"

oauth-test:
	@echo "üß™ Testando configura√ß√£o OAuth..."
	@echo "üìã Verifica√ß√µes necess√°rias:"
	@echo "   1. Extens√£o carregada em chrome://extensions/"
	@echo "   2. Modo desenvolvedor ativado"
	@echo "   3. Client ID configurado no Google Cloud Console"
	@echo ""
	@echo "üåê Abrindo p√°gina de teste OAuth..."
	@if command -v xdg-open > /dev/null; then \
		xdg-open file://$(PWD)/test-auth.html; \
	elif command -v open > /dev/null; then \
		open file://$(PWD)/test-auth.html; \
	else \
		echo "‚ùå N√£o foi poss√≠vel abrir automaticamente"; \
		echo "üìÇ Abra manualmente: file://$(PWD)/test-auth.html"; \
	fi
	@echo ""
	@echo "üîç Se houver erro 'bad client id':"
	@echo "   ‚Üí Execute: make oauth-fix-client-id"
	@echo "üîç Se houver erro 'redirect_uri_mismatch':"
	@echo "   ‚Üí Execute: make oauth-fix-redirect"

oauth-setup:
	@echo "OAuth Setup Steps:"
	@echo "1. Go to Google Cloud Console: https://console.cloud.google.com/"
	@echo "2. Navigate to APIs & Services > Credentials"
	@echo "3. Find OAuth 2.0 Client ID: nbimliadaeimcfkngknobflgnkneiddl.apps.googleusercontent.com"
	@echo "4. IMPORTANTE: Selecione 'Chrome Extension' como tipo de aplica√ß√£o"
	@echo "5. No campo 'Application ID', cole o Extension ID da extens√£o"
	@echo ""
	@echo "Current client_id in manifest.json:"
	@grep -A 1 '"client_id"' manifest.json || echo "Could not find client_id in manifest.json"
	@echo ""
	@echo "Para obter o Extension ID: make oauth-extension-id"
	@echo "For detailed guide, see: OAUTH_SETUP.md"

oauth-extension-id:
	@echo "Para obter o Extension ID:"
	@echo "1. Abra o Chrome e v√° para chrome://extensions/"
	@echo "2. Ative o 'Modo do desenvolvedor' (canto superior direito)"
	@echo "3. Carregue a extens√£o (make build primeiro se necess√°rio)"
	@echo "4. Copie o Extension ID que aparece abaixo do nome da extens√£o"
	@echo "5. Cole esse ID no campo 'Application ID' no Google Cloud Console"
	@echo ""
	@echo "O Extension ID tem formato similar a: abcdefghijklmnopqrstuvwxyz123456"

oauth-debug:
	@echo "=== DIAGN√ìSTICO OAUTH ==="
	@echo "1. Client ID no manifest.json:"
	@grep -A 1 '"client_id"' manifest.json || echo "   ‚ùå Client ID n√£o encontrado"
	@echo ""
	@echo "2. Verifica√ß√µes necess√°rias:"
	@echo "   ‚úì Extens√£o foi constru√≠da? (make build)"
	@echo "   ‚úì Extens√£o foi carregada no Chrome?"
	@echo "   ‚úì Extension ID foi copiado do chrome://extensions/?"
	@echo "   ‚úì Google Cloud Console configurado como 'Chrome Extension'?"
	@echo "   ‚úì Application ID no Google Cloud Console = Extension ID?"
	@echo ""
	@echo "3. Passos para resolver 'Error 400: redirect_uri_mismatch':"
	@echo "   a) V√° para: https://console.cloud.google.com/apis/credentials"
	@echo "   b) Encontre o Client ID: nbimliadaeimcfkngknobflgnkneiddl"
	@echo "   c) Clique em 'Editar'"
	@echo "   d) Certifique-se que 'Application type' = 'Chrome Extension'"
	@echo "   e) Cole o Extension ID no campo 'Application ID'"
	@echo "   f) Salve as altera√ß√µes"
	@echo ""
	@echo "4. Para testar: make oauth-test"
	@echo "5. Para obter Extension ID: make oauth-extension-id"
	@echo "6. Para troubleshooting detalhado: make oauth-troubleshoot"

oauth-troubleshoot:
	@echo "üìã Abrindo guia de troubleshooting detalhado..."
	@echo "üìÑ Arquivo: OAUTH_TROUBLESHOOTING.md"
	@echo ""
	@echo "üîç PONTOS CR√çTICOS para Error 400:"
	@echo "1. Extension ID muda a cada reload da extens√£o!"
	@echo "2. Deve ser 'Chrome Extension', n√£o 'Web application'"
	@echo "3. Application ID = Extension ID exato"
	@echo "4. Aguarde 5-10min para propaga√ß√£o das mudan√ßas"
	@echo ""
	@echo "‚ö†Ô∏è  SE O CLIENT_ID J√Å EST√Å CORRETO:"
	@echo "   ‚Üí O problema √© o Extension ID no Google Cloud Console"
	@echo "   ‚Üí V√° para: https://console.cloud.google.com/apis/credentials"
	@echo "   ‚Üí Edite o Client ID: nbimliadaeimcfkngknobflgnkneiddl"
	@echo "   ‚Üí Verifique se Application ID = Extension ID atual"
	@echo "   ‚Üí Extension ID atual: v√° para chrome://extensions/"
	@echo ""
	@echo "üìñ Para guia completo, veja: OAUTH_TROUBLESHOOTING.md"

oauth-fix-redirect:
	@echo "üö® CORRE√á√ÉO PARA Error 400: redirect_uri_mismatch"
	@echo ""
	@echo "PASSO 1: Obter Extension ID atual"
	@echo "   1. Abra: chrome://extensions/"
	@echo "   2. Ative 'Modo do desenvolvedor'"
	@echo "   3. Encontre 'ChronoMark - Tag & Sync Bookmarks'"
	@echo "   4. COPIE o Extension ID (ex: abcdefghijklmnopqrstuvwxyz123456)"
	@echo ""
	@echo "PASSO 2: Configurar Google Cloud Console"
	@echo "   1. Abra: https://console.cloud.google.com/apis/credentials"
	@echo "   2. Encontre Client ID: nbimliadaeimcfkngknobflgnkneiddl"
	@echo "   3. Clique em EDITAR (√≠cone l√°pis)"
	@echo "   4. Application type = 'Chrome Extension'"
	@echo "   5. Application ID = Extension ID copiado no PASSO 1"
	@echo "   6. Clique SAVE"
	@echo ""
	@echo "PASSO 3: Aguardar e testar"
	@echo "   1. Aguarde 5-10 minutos"
	@echo "   2. Execute: make oauth-test"
	@echo ""
	@echo "‚ö° IMPORTANTE: Extension ID muda a cada reload da extens√£o!"

oauth-fix-client-id:
	@echo "üö® CORRE√á√ÉO PARA 'bad client id' ERROR"
	@echo ""
	@echo "üìã Client ID atual no manifest.json:"
	@grep -o '"client_id":[^,]*' manifest.json || echo "   ‚ùå Client ID n√£o encontrado!"
	@echo ""
	@echo "üîç DIAGN√ìSTICO:"
	@echo "1. Client ID pode estar incorreto ou n√£o existir"
	@echo "2. Projeto pode estar desabilitado no Google Cloud"
	@echo "3. APIs necess√°rias podem n√£o estar habilitadas"
	@echo ""
	@echo "üõ†Ô∏è  SOLU√á√ïES:"
	@echo ""
	@echo "OP√á√ÉO A: Verificar Client ID existente"
	@echo "   1. Abra: https://console.cloud.google.com/apis/credentials"
	@echo "   2. Procure pelo Client ID atual do manifest.json (mostrado acima)"
	@echo "   3. Se n√£o existir, v√° para OP√á√ÉO B"
	@echo "   4. Se existir, verifique se est√° habilitado e configurado corretamente"
	@echo ""
	@echo "OP√á√ÉO B: Criar novo Client ID"
	@echo "   1. Abra: https://console.cloud.google.com/apis/credentials"
	@echo "   2. Clique '+ CREATE CREDENTIALS' ‚Üí 'OAuth client ID'"
	@echo "   3. Application type = 'Chrome Extension'"
	@echo "   4. Name = 'ChronoMark Extension'"
	@echo "   5. Application ID = Extension ID (chrome://extensions/)"
	@echo "   6. COPIE o novo Client ID gerado"
	@echo "   7. Execute: make oauth-update-client-id CLIENT_ID=novo_client_id"
	@echo ""
	@echo "OP√á√ÉO C: Verificar APIs habilitadas"
	@echo "   1. Abra: https://console.cloud.google.com/apis/library"
	@echo "   2. Habilite: Google Drive API"
	@echo "   3. Habilite: Google Sheets API (se necess√°rio)"
	@echo ""
	@echo "‚ö° Ap√≥s qualquer mudan√ßa, aguarde 5-10min e teste com: make oauth-test"

oauth-update-client-id:
	@if [ -z "$(CLIENT_ID)" ]; then \
		echo "‚ùå Erro: CLIENT_ID n√£o fornecido"; \
		echo "Uso: make oauth-update-client-id CLIENT_ID=seu_novo_client_id"; \
		exit 1; \
	fi
	@echo "üîÑ Atualizando Client ID no manifest.json..."
	@echo "üìã Client ID anterior:"
	@grep -o '"client_id":[^,]*' manifest.json || echo "   ‚ùå Client ID n√£o encontrado!"
	@sed -i 's/"client_id":"[^"]*"/"client_id":"$(CLIENT_ID)"/g' manifest.json
	@echo "üìã Client ID atualizado:"
	@grep -o '"client_id":[^,]*' manifest.json
	@echo "‚úÖ Client ID atualizado com sucesso!"
	@echo "üî® Executando build da extens√£o..."
	@make build
	@echo "‚ö° Agora recarregue a extens√£o em chrome://extensions/"
	@echo "üß™ Teste com: make oauth-test"

# Chrome Web Store commands
validate-store:
	@echo "üîç Validando extens√£o para Chrome Web Store..."
	@echo ""
	@echo "üìã Verificando manifest.json..."
	@test -f manifest.json || (echo "‚ùå manifest.json n√£o encontrado" && exit 1)
	@grep -q '"version"' manifest.json || (echo "‚ùå Vers√£o n√£o encontrada no manifest" && exit 1)
	@grep -q '"name"' manifest.json || (echo "‚ùå Nome n√£o encontrado no manifest" && exit 1)
	@grep -q '"description"' manifest.json || (echo "‚ùå Descri√ß√£o n√£o encontrada no manifest" && exit 1)
	@echo "‚úÖ manifest.json v√°lido"
	@echo ""
	@echo "üìã Verificando √≠cones..."
	@test -f icon16.png || (echo "‚ùå icon16.png n√£o encontrado" && exit 1)
	@test -f icon48.png || (echo "‚ùå icon48.png n√£o encontrado" && exit 1)
	@test -f icon128.png || (echo "‚ùå icon128.png n√£o encontrado" && exit 1)
	@echo "‚úÖ Todos os √≠cones encontrados"
	@echo ""
	@echo "üìã Verificando arquivos principais..."
	@test -f index.html || (echo "‚ùå index.html n√£o encontrado" && exit 1)
	@test -f background.ts || test -f background.js || (echo "‚ùå background script n√£o encontrado" && exit 1)
	@echo "‚úÖ Arquivos principais encontrados"
	@echo ""
	@echo "üéØ Vers√£o atual:"
	@grep -o '"version":[^,]*' manifest.json
	@echo ""
	@echo "‚úÖ Extens√£o pronta para empacotamento!"
	@echo "üì¶ Execute: make package"

prepare-store-assets:
	@echo "üì∏ Preparando assets para Chrome Web Store..."
	@echo ""
	@echo "üìã Assets necess√°rios:"
	@echo "   ‚úÖ √çcones (16x16, 48x48, 128x128) - J√° dispon√≠veis"
	@echo "   üì∏ Screenshots (1280x800 ou 640x400) - NECESS√ÅRIO CRIAR"
	@echo "   üñºÔ∏è  Tile icon (440x280) - Opcional"
	@echo ""
	@echo "üì∏ Para criar screenshots:"
	@echo "   1. Carregue a extens√£o em chrome://extensions/"
	@echo "   2. Abra a extens√£o e capture telas das funcionalidades"
	@echo "   3. Redimensione para 1280x800px ou 640x400px"
	@echo "   4. Salve como PNG ou JPEG"
	@echo "   5. M√≠nimo 1, m√°ximo 5 screenshots"
	@echo ""
	@echo "üé® Funcionalidades para capturar:"
	@echo "   ‚Ä¢ Interface principal com lista de bookmarks"
	@echo "   ‚Ä¢ Sistema de tags em a√ß√£o"
	@echo "   ‚Ä¢ Busca funcionando"
	@echo "   ‚Ä¢ Configura√ß√µes de sincroniza√ß√£o"
	@echo "   ‚Ä¢ Adi√ß√£o de novo bookmark com tags"
	@echo ""
	@echo "üìÅ Crie uma pasta 'store-assets' para organizar"
	@mkdir -p store-assets
	@echo "‚úÖ Pasta store-assets criada"

convert-screenshots:
	@echo "üñºÔ∏è  Convertendo screenshots SVG para PNG (1280x800)..."
	@echo ""
	@if command -v inkscape >/dev/null 2>&1; then \
		echo "‚úÖ Inkscape encontrado, convertendo..."; \
		for svg in store-assets/screenshot-*.svg; do \
			if [ -f "$$svg" ]; then \
				png="$${svg%.svg}.png"; \
				echo "üì∏ Convertendo $$svg -> $$png (1280x800)"; \
				inkscape --export-type=png --export-width=1280 --export-height=800 --export-filename="$$png" "$$svg"; \
			fi; \
		done; \
		echo "‚úÖ Screenshots convertidos para PNG (1280x800)"; \
	else \
		echo "‚ùå Inkscape n√£o encontrado. Instalando..."; \
		sudo apt update && sudo apt install -y inkscape; \
		echo "‚úÖ Inkscape instalado. Execute 'make convert-screenshots' novamente"; \
	fi
	@echo ""
	@echo "üìÅ Screenshots dispon√≠veis em store-assets/"
	@ls -la store-assets/screenshot-*.png 2>/dev/null || echo "‚ö†Ô∏è  Nenhum PNG encontrado ainda"

convert-screenshots-small:
	@echo "üñºÔ∏è  Convertendo screenshots SVG para PNG (640x400)..."
	@echo ""
	@if command -v inkscape >/dev/null 2>&1; then \
		echo "‚úÖ Inkscape encontrado, convertendo..."; \
		for svg in store-assets/screenshot-*.svg; do \
			if [ -f "$$svg" ]; then \
				png="$${svg%.svg}-small.png"; \
				echo "üì∏ Convertendo $$svg -> $$png (640x400)"; \
				inkscape --export-type=png --export-width=640 --export-height=400 --export-filename="$$png" "$$svg"; \
			fi; \
		done; \
		echo "‚úÖ Screenshots convertidos para PNG (640x400)"; \
	else \
		echo "‚ùå Inkscape n√£o encontrado. Execute 'make convert-screenshots' primeiro"; \
	fi
	@echo ""
	@echo "üìÅ Screenshots pequenos dispon√≠veis em store-assets/"
	@ls -la store-assets/screenshot-*-small.png 2>/dev/null || echo "‚ö†Ô∏è  Nenhum PNG pequeno encontrado ainda"

store-help:
	@echo "üè™ GUIA DE PUBLICA√á√ÉO NA CHROME WEB STORE"
	@echo ""
	@echo "üìã Comandos dispon√≠veis:"
	@echo "   make validate-store     - Validar extens√£o antes da publica√ß√£o"
	@echo "   make prepare-store-assets - Preparar screenshots e assets"
	@echo "   make package           - Criar arquivo ZIP para upload"
	@echo "   make store-info        - Mostrar informa√ß√µes para listagem"
	@echo "   make store-help        - Mostrar esta ajuda"
	@echo ""
	@echo "üìñ Documenta√ß√£o completa: CHROME_STORE_PUBLISHING.md"
	@echo ""
	@echo "üöÄ Processo r√°pido:"
	@echo "   1. make validate-store"
	@echo "   2. make prepare-store-assets (criar screenshots)"
	@echo "   3. make package"
	@echo "   4. Acesse: https://chrome.google.com/webstore/devconsole/"
	@echo "   5. Upload do chronomark-extension.zip"
	@echo ""
	@echo "üí∞ Taxa: $5 USD (√∫nica vez)"
	@echo "‚è±Ô∏è  Revis√£o: 1-3 dias √∫teis"

store-info:
	@echo "üìù INFORMA√á√ïES PARA CHROME WEB STORE"
	@echo ""
	@echo "üì¶ Nome: ChronoMark - Smart Bookmark Manager"
	@echo "üìã Categoria: Productivity"
	@echo "üåç Idioma: Portugu√™s (Brasil)"
	@echo ""
	@echo "üìÑ Descri√ß√£o Curta:"
	@echo "Organize seus bookmarks com tags inteligentes e sincroniza√ß√£o com Google Drive"
	@echo ""
	@echo "üîó Links importantes:"
	@echo "   üìñ Documenta√ß√£o: store-assets/STORE_LISTING.md"
	@echo "   üîí Pol√≠tica Privacidade: PRIVACY_POLICY.md"
	@echo "   üì¶ Pacote: chronomark-extension.zip"
	@echo ""
	@echo "üè∑Ô∏è  Permiss√µes necess√°rias:"
	@echo "   ‚Ä¢ bookmarks - Gerenciar bookmarks do usu√°rio"
	@echo "   ‚Ä¢ storage - Armazenar configura√ß√µes locais"
	@echo "   ‚Ä¢ identity - Autentica√ß√£o OAuth com Google"
	@echo "   ‚Ä¢ googleapis.com - Sincroniza√ß√£o com Google Drive"
	@echo ""
	@echo "üì∏ Screenshots necess√°rios: 1-5 imagens (1280x800px)"
	@echo "üí° Veja store-assets/STORE_LISTING.md para detalhes completos"

# Show help
help:
	@echo "Comandos dispon√≠veis:"
	@echo ""
	@echo "üîß DESENVOLVIMENTO:"
	@echo "  make install          - Instalar depend√™ncias"
	@echo "  make test            - Executar testes"
	@echo "  make build           - Construir extens√£o"
	@echo "  make clean           - Limpar arquivos de build"
	@echo "  make dist            - Criar pacote de distribui√ß√£o"
	@echo ""
	@echo "üîê OAUTH:"
	@echo "  make oauth-help      - Mostrar ajuda OAuth"
	@echo "  make oauth-test      - Testar configura√ß√£o OAuth"
	@echo "  make oauth-setup     - Configurar OAuth inicial"
	@echo "  make oauth-extension-id - Mostrar Extension ID"
	@echo "  make oauth-debug     - Diagn√≥stico completo OAuth"
	@echo "  make oauth-troubleshoot - Guia de troubleshooting OAuth"
	@echo "  make oauth-fix-redirect - üö® CORRIGIR Error 400: redirect_uri_mismatch"
	@echo "  make oauth-fix-client-id - üö® CORRIGIR 'bad client id' error"
	@echo "  make oauth-update-client-id CLIENT_ID=xxx - Atualizar Client ID no manifest"
	@echo ""
	@echo "üè™ CHROME WEB STORE:"
	@echo "  make validate-store   - Validar extens√£o para publica√ß√£o"
	@echo "  make prepare-store-assets - Preparar screenshots e assets"
	@echo "  make convert-screenshots    # Converter screenshots SVG para PNG (1280x800)"
	@echo "  make convert-screenshots-small # Converter screenshots SVG para PNG (640x400)"
	@echo "  make package         - Criar arquivo .zip para Chrome Web Store"
	@echo "  make store-info      - Informa√ß√µes para listagem"
	@echo "  make store-help      - Guia completo de publica√ß√£o"