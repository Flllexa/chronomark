.PHONY: install test build clean dist package help oauth-help oauth-test oauth-setup oauth-extension-id oauth-debug oauth-troubleshoot oauth-fix-redirect oauth-fix-client-id oauth-update-client-id validate-store prepare-store-assets store-help examples huggingface-setup huggingface-start huggingface-stop gemini-setup store-preview test-pr

# Default target
all: install build

# Install dependencies
install:
	npm install

# Test the project (no tests currently defined in package.json)
test:
	@echo "No tests currently defined in package.json"

# Test a Pull Request by creating a local branch
test-pr:
	@if [ -z "$(PR)" ]; then \
		echo "‚ùå Error: PR number not provided"; \
		echo "Usage: make test-pr PR=1"; \
		exit 1; \
	fi
	@echo "üîÑ Setting up test environment for PR #$(PR)..."
	@echo "üì° Configuring git to fetch PRs..."
	@git config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*' 2>/dev/null || true
	@echo "üì• Fetching PR #$(PR)..."
	@git fetch origin
	@echo "üåø Creating test branch for PR #$(PR)..."
	@git checkout -b test-pr-$(PR) origin/pr/$(PR)
	@echo ""
	@echo "‚úÖ Test branch 'test-pr-$(PR)' created successfully!"
	@echo "üìã Recent commits on this branch:"
	@git log --oneline -3
	@echo ""
	@echo "üß™ NEXT STEPS:"
	@echo "   ‚Ä¢ Test the application normally"
	@echo "   ‚Ä¢ Verify new features work correctly"
	@echo "   ‚Ä¢ Check for any breaking changes"
	@echo ""
	@echo "üîÑ When finished testing:"
	@echo "   ‚Ä¢ Return to master: git checkout master"
	@echo "   ‚Ä¢ Delete test branch: git branch -D test-pr-$(PR)"

# Build the project (outputs to dist folder)
build:
	@echo "üìã Using development manifest..."
	cp manifest-development.json manifest.json
	npm run build
	npm run dist
	@echo "Build completed - files available in dist/ folder"

# Clean build artifacts
clean:
	npm run clean
	rm -f background.js index.js chronomark-extension.zip

# Create distribution folder with only necessary extension files
dist:
	npm run dist

# Package the extension for distribution
package:
	@echo "üìã Using production manifest..."
	cp manifest-production.json manifest.json
	npm run build
	npm run dist
	@echo "Build completed with production manifest - files available in dist/ folder"
	@echo "üì¶ Creating package for Chrome Web Store..."
	@mkdir -p dist
	@echo "üìã Checking required files..."
	@test -f dist/manifest.json || (echo "‚ùå manifest.json not found" && exit 1)
	@test -f dist/index.html || (echo "‚ùå index.html not found" && exit 1)
	@test -f dist/icon16.png || (echo "‚ùå icon16.png not found" && exit 1)
	@test -f dist/icon48.png || (echo "‚ùå icon48.png not found" && exit 1)
	@test -f dist/icon128.png || (echo "‚ùå icon128.png not found" && exit 1)
	@echo "‚úÖ All required files found"
	@cd dist && zip -r ../chronomark-extension.zip . -x "*.DS_Store" "*.git*" "*.map" "node_modules/*"
	@echo "‚úÖ Package created: chronomark-extension.zip"
	@ls -lh chronomark-extension.zip
	@echo "üìã Next step: Go to https://chrome.google.com/webstore/devconsole/"

# OAuth setup and troubleshooting commands
oauth-help:
	@echo "OAuth Setup and Troubleshooting Commands:"
	@echo "  oauth-help   - Show OAuth help and setup instructions"
	@echo "  oauth-test   - Open OAuth test page in browser"
	@echo "  oauth-setup  - Show OAuth configuration steps"
	@echo ""
	@echo "If you're getting 'redirect_uri_mismatch' error:"
	@echo "1. Load the extension in Chrome (Developer mode)"
	@echo "2. Copy the Extension ID from chrome://extensions/"
	@echo "3. Add this redirect URI in Google Cloud Console:"
	@echo "   https://YOUR_EXTENSION_ID.chromiumapp.org/"
	@echo ""
	@echo "For detailed instructions, see: OAUTH_SETUP.md"

oauth-test:
	@echo "üß™ Testing OAuth configuration..."
	@echo "üìã Required checks:"
	@echo "   1. Extension loaded in chrome://extensions/"
	@echo "   2. Developer mode enabled"
	@echo "   3. Client ID configured in Google Cloud Console"
	@echo ""
	@echo "üåê Opening OAuth test page..."
	@if command -v xdg-open > /dev/null; then \
		xdg-open file://$(PWD)/test-auth.html; \
	elif command -v open > /dev/null; then \
		open file://$(PWD)/test-auth.html; \
	else \
		echo "‚ùå Could not open automatically"; \
		echo "üìÇ Open manually: file://$(PWD)/test-auth.html"; \
	fi
	@echo ""
	@echo "üîç If you get 'bad client id' error:"
	@echo "   ‚Üí Run: make oauth-fix-client-id"
	@echo "üîç If you get 'redirect_uri_mismatch' error:"
	@echo "   ‚Üí Run: make oauth-fix-redirect"

oauth-setup:
	@echo "OAuth Setup Steps:"
	@echo "1. Go to Google Cloud Console: https://console.cloud.google.com/"
	@echo "2. Navigate to APIs & Services > Credentials"
	@echo "3. Find OAuth 2.0 Client ID: <ID>.apps.googleusercontent.com"
	@echo "4. IMPORTANT: Select 'Chrome Extension' as application type"
	@echo "5. IMPORTANT: Use 'ChronoMark Extension' as name (NOT 'MyApp')"
	@echo "6. In the 'Application ID' field, paste the Extension ID"
	@echo ""
	@echo "Current client_id in manifest.json:"
	@grep -A 1 '"client_id"' manifest.json || echo "Could not find client_id in manifest.json"
	@echo ""
	@echo "To get Extension ID: make oauth-extension-id"
	@echo "For detailed guide, see: OAUTH_SETUP.md"
	@echo "To fix app name issues, see: FIX_GOOGLE_APP_NAME.md"

oauth-extension-id:
	@echo "To get the Extension ID:"
	@echo "1. Open Chrome and go to chrome://extensions/"
	@echo "2. Enable 'Developer mode' (top right corner)"
	@echo "3. Load the extension (run make build first if needed)"
	@echo "4. Copy the Extension ID that appears below the extension name"
	@echo "5. Paste this ID in the 'Application ID' field in Google Cloud Console"
	@echo ""
	@echo "Extension ID format looks like: abcdefghijklmnopqrstuvwxyz123456"

oauth-debug:
	@echo "=== OAUTH DIAGNOSIS ==="
	@echo "1. Client ID in manifest.json:"
	@grep -A 1 '"client_id"' manifest.json || echo "   ‚ùå Client ID not found"
	@echo ""
	@echo "2. Required checks:"
	@echo "   ‚úì Extension built? (make build)"
	@echo "   ‚úì Extension loaded in Chrome?"
	@echo "   ‚úì Extension ID copied from chrome://extensions/?"
	@echo "   ‚úì Google Cloud Console configured as 'Chrome Extension'?"
	@echo "   ‚úì Application ID in Google Cloud Console = Extension ID?"
	@echo ""
	@echo "3. Steps to fix 'Error 400: redirect_uri_mismatch':"
	@echo "   a) Go to: https://console.cloud.google.com/apis/credentials"
	@echo "   b) Find Client ID: nbimliadaeimcfkngknobflgnkneiddl"
	@echo "   c) Click 'Edit'"
	@echo "   d) Make sure 'Application type' = 'Chrome Extension'"
	@echo "   e) Paste Extension ID in 'Application ID' field"
	@echo "   f) Save changes"
	@echo ""
	@echo "4. To test: make oauth-test"
	@echo "5. To get Extension ID: make oauth-extension-id"
	@echo "6. For detailed troubleshooting: make oauth-troubleshoot"

oauth-troubleshoot:
	@echo "üìã Opening detailed troubleshooting guide..."
	@echo "üìÑ File: OAUTH_TROUBLESHOOTING.md"
	@echo ""
	@echo "üîç CRITICAL POINTS for Error 400:"
	@echo "1. Extension ID changes with each extension reload!"
	@echo "2. Must be 'Chrome Extension', not 'Web application'"
	@echo "3. Application ID = exact Extension ID"
	@echo "4. Wait 5-10min for changes to propagate"
	@echo ""
	@echo "‚ö†Ô∏è  IF CLIENT_ID IS ALREADY CORRECT:"
	@echo "   ‚Üí The problem is Extension ID in Google Cloud Console"
	@echo "   ‚Üí Go to: https://console.cloud.google.com/apis/credentials"
	@echo "   ‚Üí Edit Client ID: nbimliadaeimcfkngknobflgnkneiddl"
	@echo "   ‚Üí Check that Application ID = current Extension ID"
	@echo "   ‚Üí Current Extension ID: go to chrome://extensions/"
	@echo ""
	@echo "üìñ For complete guide, see: OAUTH_TROUBLESHOOTING.md"

oauth-fix-redirect:
	@echo "üö® FIX FOR Error 400: redirect_uri_mismatch"
	@echo ""
	@echo "STEP 1: Get current Extension ID"
	@echo "   1. Open: chrome://extensions/"
	@echo "   2. Enable 'Developer mode'"
	@echo "   3. Find 'ChronoMark - Tag & Sync Bookmarks'"
	@echo "   4. COPY the Extension ID (e.g.: abcdefghijklmnopqrstuvwxyz123456)"
	@echo ""
	@echo "STEP 2: Configure Google Cloud Console"
	@echo "   1. Open: https://console.cloud.google.com/apis/credentials"
	@echo "   2. Find Client ID: nbimliadaeimcfkngknobflgnkneiddl"
	@echo "   3. Click EDIT (pencil icon)"
	@echo "   4. Application type = 'Chrome Extension'"
	@echo "   5. Application ID = Extension ID copied in STEP 1"
	@echo "   6. Click SAVE"
	@echo ""
	@echo "STEP 3: Wait and test"
	@echo "   1. Wait 5-10 minutes"
	@echo "   2. Run: make oauth-test"
	@echo ""
	@echo "‚ö° IMPORTANT: Extension ID changes with each extension reload!"

oauth-fix-client-id:
	@echo "üö® FIX FOR 'bad client id' ERROR"
	@echo ""
	@echo "üìã Current Client ID in manifest.json:"
	@grep -o '"client_id":[^,]*' manifest.json || echo "   ‚ùå Client ID not found!"
	@echo ""
	@echo "üîç DIAGNOSIS:"
	@echo "1. Client ID may be incorrect or not exist"
	@echo "2. Project may be disabled in Google Cloud"
	@echo "3. Required APIs may not be enabled"
	@echo ""
	@echo "üõ†Ô∏è  SOLUTIONS:"
	@echo ""
	@echo "OPTION A: Check existing Client ID"
	@echo "   1. Open: https://console.cloud.google.com/apis/credentials"
	@echo "   2. Look for current Client ID from manifest.json (shown above)"
	@echo "   3. If it doesn't exist, go to OPTION B"
	@echo "   4. If it exists, verify it's enabled and configured correctly"
	@echo ""
	@echo "OPTION B: Create new Client ID"
	@echo "   1. Open: https://console.cloud.google.com/apis/credentials"
	@echo "   2. Click '+ CREATE CREDENTIALS' ‚Üí 'OAuth client ID'"
	@echo "   3. Application type = 'Chrome Extension'"
	@echo "   4. Name = 'ChronoMark Extension'"
	@echo "   5. Application ID = Extension ID (chrome://extensions/)"
	@echo "   6. COPY the new generated Client ID"
	@echo "   7. Run: make oauth-update-client-id CLIENT_ID=new_client_id"
	@echo ""
	@echo "OPTION C: Check enabled APIs"
	@echo "   1. Open: https://console.cloud.google.com/apis/library"
	@echo "   2. Enable: Google Drive API"
	@echo "   3. Enable: Google Sheets API (if needed)"
	@echo ""
	@echo "‚ö° After any change, wait 5-10min and test with: make oauth-test"

oauth-check-app-name:
	@echo "üîç CHECKING APP NAME CONFIGURATION"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìã STEPS TO VERIFY APP NAME IN GOOGLE CLOUD CONSOLE:"
	@echo "1. Go to: https://console.cloud.google.com/apis/credentials/consent"
	@echo "2. Check that 'App name' shows 'ChronoMark' (NOT 'MyApp')"
	@echo "3. Go to: https://console.cloud.google.com/apis/credentials"
	@echo "4. Check that OAuth Client names include 'ChronoMark'"
	@echo ""
	@echo "üö® IF YOU SEE 'MyApp' OR GENERIC NAMES:"
	@echo "   ‚Üí Follow the guide: FIX_GOOGLE_APP_NAME.md"
	@echo "   ‚Üí This affects user-facing OAuth consent screen"
	@echo ""
	@echo "‚úÖ LOCAL CONFIGURATION (should be correct):"
	@echo "   Extension name in manifest.json:"
	@grep -o '"name":[^,]*' manifest.json || echo "   ‚ùå Name not found!"
	@echo ""

oauth-update-client-id:
	@if [ -z "$(CLIENT_ID)" ]; then \
		echo "‚ùå Error: CLIENT_ID not provided"; \
		echo "Usage: make oauth-update-client-id CLIENT_ID=your_new_client_id"; \
		exit 1; \
	fi
	@echo "üîÑ Updating Client ID in manifest.json..."
	@echo "üìã Previous Client ID:"
	@grep -o '"client_id":[^,]*' manifest.json || echo "   ‚ùå Client ID not found!"
	@sed -i 's/"client_id":"[^"]*"/"client_id":"$(CLIENT_ID)"/g' manifest.json
	@echo "üìã Updated Client ID:"
	@grep -o '"client_id":[^,]*' manifest.json
	@echo "‚úÖ Client ID updated successfully!"
	@echo "üî® Building extension..."
	@make build
	@echo "‚ö° Now reload extension in chrome://extensions/"
	@echo "üß™ Test with: make oauth-test"

# Chrome Web Store commands
validate-store:
	@echo "üîç Validando extens√£o para Chrome Web Store..."
	@echo ""
	@echo "üìã Verificando manifest.json..."
	@test -f manifest.json || (echo "‚ùå manifest.json n√£o encontrado" && exit 1)
	@grep -q '"version"' manifest.json || (echo "‚ùå Vers√£o n√£o encontrada no manifest" && exit 1)
	@grep -q '"name"' manifest.json || (echo "‚ùå Nome n√£o encontrado no manifest" && exit 1)
	@grep -q '"description"' manifest.json || (echo "‚ùå Descri√ß√£o n√£o encontrada no manifest" && exit 1)
	@echo "‚úÖ manifest.json v√°lido"
	@echo ""
	@echo "üìã Verificando √≠cones..."
	@test -f icon16.png || (echo "‚ùå icon16.png n√£o encontrado" && exit 1)
	@test -f icon48.png || (echo "‚ùå icon48.png n√£o encontrado" && exit 1)
	@test -f icon128.png || (echo "‚ùå icon128.png n√£o encontrado" && exit 1)
	@echo "‚úÖ Todos os √≠cones encontrados"
	@echo ""
	@echo "üìã Verificando arquivos principais..."
	@test -f index.html || (echo "‚ùå index.html n√£o encontrado" && exit 1)
	@test -f background.ts || test -f background.js || (echo "‚ùå background script n√£o encontrado" && exit 1)
	@echo "‚úÖ Arquivos principais encontrados"
	@echo ""
	@echo "üéØ Vers√£o atual:"
	@grep -o '"version":[^,]*' manifest.json
	@echo ""
	@echo "‚úÖ Extens√£o pronta para empacotamento!"
	@echo "üì¶ Execute: make package"

prepare-store-assets:
	@echo "üì∏ Preparando assets para Chrome Web Store..."
	@echo ""
	@echo "üìã Assets necess√°rios:"
	@echo "   ‚úÖ √çcones (16x16, 48x48, 128x128) - J√° dispon√≠veis"
	@echo "   üì∏ Screenshots (1280x800 ou 640x400) - NECESS√ÅRIO CRIAR"
	@echo "   üñºÔ∏è  Tile icon (440x280) - Opcional"
	@echo ""
	@echo "üì∏ Para criar screenshots:"
	@echo "   1. Carregue a extens√£o em chrome://extensions/"
	@echo "   2. Abra a extens√£o e capture telas das funcionalidades"
	@echo "   3. Redimensione para 1280x800px ou 640x400px"
	@echo "   4. Salve como PNG ou JPEG"
	@echo "   5. M√≠nimo 1, m√°ximo 5 screenshots"
	@echo ""
	@echo "üé® Funcionalidades para capturar:"
	@echo "   ‚Ä¢ Interface principal com lista de bookmarks"
	@echo "   ‚Ä¢ Sistema de tags em a√ß√£o"
	@echo "   ‚Ä¢ Busca funcionando"
	@echo "   ‚Ä¢ Configura√ß√µes de sincroniza√ß√£o"
	@echo "   ‚Ä¢ Adi√ß√£o de novo bookmark com tags"
	@echo ""
	@echo "üìÅ Crie uma pasta 'store-assets' para organizar"
	@mkdir -p store-assets
	@echo "‚úÖ Pasta store-assets criada"

convert-screenshots:
	@echo "üñºÔ∏è  Convertendo screenshots SVG para PNG (1280x800)..."
	@echo ""
	@if command -v inkscape >/dev/null 2>&1; then \
		echo "‚úÖ Inkscape encontrado, convertendo..."; \
		for svg in store-assets/screenshot-*.svg; do \
			if [ -f "$$svg" ]; then \
				png="$${svg%.svg}.png"; \
				echo "üì∏ Convertendo $$svg -> $$png (1280x800)"; \
				inkscape --export-type=png --export-width=1280 --export-height=800 --export-filename="$$png" "$$svg"; \
			fi; \
		done; \
		echo "‚úÖ Screenshots convertidos para PNG (1280x800)"; \
	else \
		echo "‚ùå Inkscape n√£o encontrado. Instalando..."; \
		sudo apt update && sudo apt install -y inkscape; \
		echo "‚úÖ Inkscape instalado. Execute 'make convert-screenshots' novamente"; \
	fi
	@echo ""
	@echo "üìÅ Screenshots dispon√≠veis em store-assets/"
	@ls -la store-assets/screenshot-*.png 2>/dev/null || echo "‚ö†Ô∏è  Nenhum PNG encontrado ainda"

convert-screenshots-small:
	@echo "üñºÔ∏è  Convertendo screenshots SVG para PNG (640x400)..."
	@echo ""
	@if command -v inkscape >/dev/null 2>&1; then \
		echo "‚úÖ Inkscape encontrado, convertendo..."; \
		for svg in store-assets/screenshot-*.svg; do \
			if [ -f "$$svg" ]; then \
				png="$${svg%.svg}-small.png"; \
				echo "üì∏ Convertendo $$svg -> $$png (640x400)"; \
				inkscape --export-type=png --export-width=640 --export-height=400 --export-filename="$$png" "$$svg"; \
			fi; \
		done; \
		echo "‚úÖ Screenshots convertidos para PNG (640x400)"; \
	else \
		echo "‚ùå Inkscape n√£o encontrado. Execute 'make convert-screenshots' primeiro"; \
	fi
	@echo ""
	@echo "üìÅ Screenshots pequenos dispon√≠veis em store-assets/"
	@ls -la store-assets/screenshot-*-small.png 2>/dev/null || echo "‚ö†Ô∏è  Nenhum PNG pequeno encontrado ainda"

generate-store-readme:
	@echo "üìù Gerando README otimizado para Chrome Web Store..."
	@echo ""
	@echo "# üîñ ChronoMark - Smart Bookmark Manager" > store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "**Organize, sincronize e encontre seus bookmarks com intelig√™ncia artificial**" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "## ‚ú® Principais Funcionalidades" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "- üè∑Ô∏è **Sistema de Tags Inteligente** - Organize bookmarks por categorias personalizadas" >> store-assets/CHROME_STORE_README.md
	@echo "- ‚òÅÔ∏è **Sincroniza√ß√£o Google Drive** - Seus dados seguros e acess√≠veis em qualquer lugar" >> store-assets/CHROME_STORE_README.md
	@echo "- üîç **Busca Avan√ßada** - Encontre qualquer bookmark instantaneamente" >> store-assets/CHROME_STORE_README.md
	@echo "- ü§ñ **IA Integrada** - Sugest√µes autom√°ticas de tags e organiza√ß√£o" >> store-assets/CHROME_STORE_README.md
	@echo "- üìä **Estat√≠sticas Detalhadas** - Acompanhe seus h√°bitos de navega√ß√£o" >> store-assets/CHROME_STORE_README.md
	@echo "- üîí **Privacidade Total** - Seus dados ficam apenas com voc√™" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "## üöÄ Por que ChronoMark?" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "Cansado de perder bookmarks importantes? ChronoMark transforma o caos dos seus favoritos em uma biblioteca organizada e inteligente." >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Tags Ilimitadas** vs Apenas pastas" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Sincroniza√ß√£o Google Drive** vs Limitada" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Busca com IA** vs Busca b√°sica" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Interface Moderna** vs Interface b√°sica" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "## üîí Privacidade e Seguran√ßa" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "- Seus dados ficam apenas com voc√™" >> store-assets/CHROME_STORE_README.md
	@echo "- Sincroniza√ß√£o opcional com Google Drive" >> store-assets/CHROME_STORE_README.md
	@echo "- Nenhum dado √© enviado para servidores externos" >> store-assets/CHROME_STORE_README.md
	@echo "- C√≥digo aberto e audit√°vel" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "---" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "*Transforme seus bookmarks em uma ferramenta poderosa de produtividade!*" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ README otimizado criado em store-assets/CHROME_STORE_README.md"

store-help:
	@echo "üè™ GUIA DE PUBLICA√á√ÉO NA CHROME WEB STORE"
	@echo ""
	@echo "üìã Comandos dispon√≠veis:"
	@echo "   make validate-store     - Validar extens√£o antes da publica√ß√£o"
	@echo "   make prepare-store-assets - Preparar screenshots e assets"
	@echo "   make package           - Criar arquivo ZIP para upload"
	@echo "   make store-info        - Mostrar informa√ß√µes para listagem"
	@echo "   make store-help        - Mostrar esta ajuda"
	@echo ""
	@echo "üìñ Documenta√ß√£o completa: CHROME_STORE_PUBLISHING.md"
	@echo ""
	@echo "üöÄ Processo r√°pido:"
	@echo "   1. make validate-store"
	@echo "   2. make prepare-store-assets (criar screenshots)"
	@echo "   3. make package"
	@echo "   4. Acesse: https://chrome.google.com/webstore/devconsole/"
	@echo "   5. Upload do chronomark-extension.zip"
	@echo ""
	@echo "üí∞ Taxa: $5 USD (√∫nica vez)"
	@echo "‚è±Ô∏è  Revis√£o: 1-3 dias √∫teis"

privacy-justifications:
	@echo "üîí JUSTIFICATIVAS DE PRIVACIDADE - CHROME WEB STORE"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìù PROP√ìSITO √öNICO:"
	@echo "ChronoMark √© um gerenciador inteligente de bookmarks que permite"
	@echo "organizar, sincronizar e encontrar favoritos usando tags e IA."
	@echo ""
	@echo "üîë JUSTIFICATIVAS DE PERMISS√ïES:"
	@echo ""
	@echo "üìö BOOKMARKS:"
	@echo "‚Ä¢ Ler/criar/atualizar bookmarks do Chrome"
	@echo "‚Ä¢ Importar bookmarks existentes"
	@echo "‚Ä¢ Sincronizar entre dispositivos"
	@echo ""
	@echo "üíæ STORAGE:"
	@echo "‚Ä¢ Armazenar configura√ß√µes do usu√°rio"
	@echo "‚Ä¢ Cache de tags e metadados"
	@echo "‚Ä¢ Tokens de autentica√ß√£o (criptografados)"
	@echo ""
	@echo "üÜî IDENTITY:"
	@echo "‚Ä¢ Autentica√ß√£o OAuth2 com Google Drive"
	@echo "‚Ä¢ Tokens tempor√°rios para sincroniza√ß√£o"
	@echo "‚Ä¢ Nenhum dado permanente coletado"
	@echo ""
	@echo "üåê HOST PERMISSIONS (googleapis.com):"
	@echo "‚Ä¢ Comunica√ß√£o com Google Drive API"
	@echo "‚Ä¢ Upload/download de backups"
	@echo "‚Ä¢ Apenas endpoints espec√≠ficos do Google"
	@echo ""
	@echo "‚è∞ ALARMS:"
	@echo "‚Ä¢ Sincroniza√ß√£o autom√°tica peri√≥dica"
	@echo "‚Ä¢ Limpeza de cache tempor√°rio"
	@echo "‚Ä¢ Verifica√ß√£o de integridade"
	@echo ""
	@echo "üìë TABS:"
	@echo "‚Ä¢ Detectar sites j√° marcados"
	@echo "‚Ä¢ Sugerir tags baseadas na p√°gina"
	@echo "‚Ä¢ Facilitar adi√ß√£o r√°pida de bookmarks"
	@echo ""
	@echo "üíª REMOTE CODE:"
	@echo "‚Ä¢ Bibliotecas de IA (Google Gemini)"
	@echo "‚Ä¢ Atualiza√ß√µes de seguran√ßa da API"
	@echo "‚Ä¢ Componentes de interface din√¢micos"
	@echo ""
	@echo "‚úÖ CONFORMIDADE:"
	@echo "‚Ä¢ Nenhum dado pessoal desnecess√°rio coletado"
	@echo "‚Ä¢ Dados ficam no dispositivo/Google Drive pessoal"
	@echo "‚Ä¢ C√≥digo aberto e audit√°vel"
	@echo "‚Ä¢ Conformidade com LGPD/GDPR"
	@echo ""
	@echo "üìÑ Detalhes completos: store-assets/PRIVACY_JUSTIFICATIONS.md"

# Checklist de publica√ß√£o para Chrome Web Store
publication-checklist:
	@echo "üìã PUBLICATION CHECKLIST - CHROME WEB STORE"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "‚ùå IDENTIFIED ISSUES:"
	@echo "1. üìß Email not verified in Developer Console"
	@echo "2. üîí Privacy practices not filled"
	@echo "3. ‚úÖ Compliance certification pending"
	@echo ""
	@echo "üìã STEPS TO RESOLVE:"
	@echo "1. üìß Configure email in Account tab"
	@echo "2. ‚úâÔ∏è  Verify email (check inbox)"
	@echo "3. üîí Fill Privacy practices tab"
	@echo "4. ‚úÖ Mark compliance certification"
	@echo "5. üíæ Save draft (Save Draft)"
	@echo "6. üöÄ Submit for review"
	@echo ""
	@echo "üìÑ Complete guide: store-assets/PUBLICATION_CHECKLIST.md"
	@echo "üîí Justifications: make privacy-justifications"

# Test instructions for Chrome Web Store
test-instructions:
	@echo "üß™ TEST INSTRUCTIONS - CHROME WEB STORE"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üîê TEST ACCOUNT:"
	@echo "‚Ä¢ Email: chronomark.test@gmail.com"
	@echo "‚Ä¢ Password: ChromeTest2024!"
	@echo "‚Ä¢ Google Drive: Configured with OAuth"
	@echo ""
	@echo "üß™ MAIN TESTS:"
	@echo "1. üìö Basic bookmark management"
	@echo "2. üè∑Ô∏è  Tag system and filtering"
	@echo "3. üîÑ Google Drive sync (optional)"
	@echo "4. üé® Interface and usability"
	@echo ""
	@echo "‚è±Ô∏è  ESTIMATED TIME: 15-20 minutes"
	@echo "üéØ CRITERIA: Essential features + UX"
	@echo ""
	@echo "üìÑ Complete instructions: store-assets/TEST_INSTRUCTIONS.md"

# How to test extension pending approval
test-pending:
	@echo "üß™ TEST EXTENSION PENDING APPROVAL"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìã STATUS: Extension submitted for review"
	@echo ""
	@echo "üîß TEST METHODS:"
	@echo "1. üíª LOCAL TEST (Recommended):"
	@echo "   ‚Ä¢ make package ‚Üí Install in developer mode"
	@echo "   ‚Ä¢ Full control + immediate testing"
	@echo ""
	@echo "2. üåê TEST LINK (Chrome Web Store):"
	@echo "   ‚Ä¢ Developer Console ‚Üí Preview link"
	@echo "   ‚Ä¢ Limited during review"
	@echo ""
	@echo "3. üë• SHARE PACKAGE:"
	@echo "   ‚Ä¢ Send .zip to testers"
	@echo "   ‚Ä¢ Manual installation"
	@echo ""
	@echo "‚è≥ APPROVAL TIME: 1-7 business days"
	@echo "üìß Monitor Google emails for updates"
	@echo ""
	@echo "üìÑ Complete guide: store-assets/TESTING_PENDING_EXTENSION.md"

# Configure AI integration
ai-setup:
	@echo "ü§ñ AI CONFIGURATION - CHRONOMARK"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìã AVAILABLE METHODS:"
	@echo "1. ü§ñ GOOGLE GEMINI (Recommended):"
	@echo "   ‚Ä¢ Uses user authentication via Chrome identity API"
	@echo "   ‚Ä¢ No backend server required"
	@echo "   ‚Ä¢ Secure OAuth tokens"
	@echo "   ‚Ä¢ Example: BookmarkFormWithGemini.tsx"
	@echo ""
	@echo "2. üîí PROXY BACKEND:"
	@echo "   ‚Ä¢ Secure keys on server"
	@echo "   ‚Ä¢ Full control over usage and limits"
	@echo "   ‚Ä¢ Multiple AI providers"
	@echo ""
	@echo "3. üÜì FREE APIS:"
	@echo "   ‚Ä¢ HuggingFace Inference API"
	@echo "   ‚Ä¢ Groq (free with limits)"
	@echo "   ‚Ä¢ No keys exposed in extension"
	@echo ""
	@echo "4. üß† LOCAL AI (WebLLM):"
	@echo "   ‚Ä¢ Browser processing"
	@echo "   ‚Ä¢ No external dependencies"
	@echo "   ‚Ä¢ Total privacy"
	@echo ""
	@echo "5. üéØ SMART RULES (Implemented):"
	@echo "   ‚Ä¢ Domain and keyword-based system"
	@echo "   ‚Ä¢ No APIs or keys required"
	@echo "   ‚Ä¢ Maximum performance"
	@echo ""
	@echo "üí° RECOMMENDATION: Start with Gemini + Rules as fallback"
	@echo "üîí SECURITY: Never expose keys in extension code"
	@echo ""
	@echo "üìÑ Complete guides:"
	@echo "   ‚Ä¢ AI_INTEGRATION_GUIDE.md"
	@echo "   ‚Ä¢ examples/README-Gemini.md"
	@echo "   ‚Ä¢ examples/README-HuggingFace.md"
	@echo ""
	@echo "üìù Practical examples:"
	@echo "   ‚Ä¢ examples/BookmarkFormWithAI.tsx (local rules)"
	@echo "   ‚Ä¢ examples/BookmarkFormWithGemini.tsx (Gemini AI)"
	@echo "   ‚Ä¢ examples/BookmarkFormWithHuggingFace.tsx (HuggingFace)"
	@echo ""
	@echo "Quick Start Commands:"
	@echo "  make gemini-setup       - Setup Gemini integration"
	@echo "  make huggingface-setup  - Setup Hugging Face integration"
	@echo "  make huggingface-start  - Start Hugging Face proxy server"

store-info:
	@echo "üìã INFORMA√á√ïES PARA CHROME WEB STORE"
	@echo ""
	@echo "üì¶ Nome: ChronoMark - Smart Bookmark Manager"
	@echo "üìã Categoria: Productivity"
	@echo "üåç Idioma: Portugu√™s (Brasil)"
	@echo ""
	@echo "üìÑ Descri√ß√£o Curta:"
	@echo "Organize seus bookmarks com tags inteligentes e sincroniza√ß√£o com Google Drive"
	@echo ""
	@echo "üîó Links importantes:"
	@echo "   üìñ Documenta√ß√£o: store-assets/STORE_LISTING.md"
	@echo "   üîí Pol√≠tica Privacidade: PRIVACY_POLICY.md"
	@echo "   üì¶ Pacote: chronomark-extension.zip"
	@echo ""
	@echo "üì∑  Permiss√µes necess√°rias:"
	@echo "   ‚Ä¢ bookmarks - Gerenciar bookmarks do usu√°rio"
	@echo "   ‚Ä¢ storage - Armazenar configura√ß√µes locais"
	@echo "   ‚Ä¢ identity - Autentica√ß√£o OAuth com Google"
	@echo "   ‚Ä¢ googleapis.com - Sincroniza√ß√£o com Google Drive"
	@echo ""
	@echo "üì∏ Screenshots necess√°rios: 1-5 imagens (1280x800px)"
	@echo "üí° Veja store-assets/STORE_LISTING.md para detalhes completos"

# Hugging Face Integration Commands
huggingface-setup:
	@echo "ü§ñ Hugging Face Integration Setup"
	@echo "================================="
	@echo ""
	@echo "üìã Setup Steps:"
	@echo "1. üìÅ Navigate to examples directory: cd examples"
	@echo "2. üì¶ Install dependencies: npm install"
	@echo "3. üîë Copy environment file: cp .env.example .env"
	@echo "4. ‚úèÔ∏è  Edit .env with your Hugging Face API key"
	@echo "5. üöÄ Start proxy server: make huggingface-start"
	@echo ""
	@echo "üîë Get API Key:"
	@echo "   1. Visit: https://huggingface.co/settings/tokens"
	@echo "   2. Create new token with 'Read' permissions"
	@echo "   3. Copy token to .env file"
	@echo ""
	@echo "üìñ Full guide: examples/README-HuggingFace.md"

huggingface-start:
	@echo "üöÄ Starting Hugging Face Proxy Server..."
	@if [ ! -f examples/.env ]; then \
		echo "‚ùå Error: .env file not found!"; \
		echo "Run 'make huggingface-setup' first"; \
		exit 1; \
	fi
	@cd examples && npm run dev."
	@if [ ! -f examples/.env ]; then \
		echo "‚ùå Error: .env file not found!"; \
		echo "Run 'make huggingface-setup' first"; \
		exit 1; \
	fi
	@cd examples && npm run dev

# Create 1280x800 images with original screenshots centered on black background
create-centered-screenshots:
	@echo "üñºÔ∏è  Creating 1280x800 images with centered screenshots on black background..."
	@echo ""
	@if command -v convert >/dev/null 2>&1; then \
		echo "‚úÖ ImageMagick found, processing screenshots..."; \
		convert -size 1280x800 xc:black store-assets/screenshot1.png -gravity center -composite store-assets/screenshot1-centered.png; \
		convert -size 1280x800 xc:black store-assets/screenshot2.png -gravity center -composite store-assets/screenshot2-centered.png; \
		convert -size 1280x800 xc:black store-assets/screenshot3.png -gravity center -composite store-assets/screenshot3-centered.png; \
		convert -size 1280x800 xc:black store-assets/screenshot4.png -gravity center -composite store-assets/screenshot4-centered.png; \
		echo ""; \
		echo "‚úÖ Centered screenshots created successfully in 1280x800 format!"; \
	else \
		echo "‚ùå ImageMagick not found. Install with: sudo apt install imagemagick"; \
	fi
	@echo ""
	@echo "üìÅ Centered screenshots available in store-assets/"
	@ls -la store-assets/screenshot*-centered.png 2>/dev/null || echo "‚ö†Ô∏è  No centered screenshots found yet"

validate-extension:
	@echo "üîç Checking main files..."
	@echo "üìÅ File structure:"
	@ls -la dist/ 2>/dev/null || echo "   ‚ùå dist/ folder not found - run 'make build'"
	@echo ""
	@echo "üìã Checking manifest.json:"
	@if [ -f "manifest.json" ]; then \
		echo "   ‚úÖ manifest.json found"; \
		jq . manifest.json > /dev/null 2>&1 && echo "   ‚úÖ Valid JSON" || echo "   ‚ùå Invalid JSON"; \
	else \
		echo "   ‚ùå manifest.json not found"; \
	fi
	@echo ""
	@echo "üî¢ Extension version:"
	@jq -r '.version' manifest.json 2>/dev/null || echo "   ‚ùå Could not read version"

huggingface-stop:
	@echo "üõë Stopping Hugging Face Proxy Server..."
	@pkill -f "node.*huggingface-proxy-backend" || echo "No server running"

# Gemini Integration Commands
gemini-setup:
	@echo "ü§ñ Google Gemini Integration Setup"
	@echo "==================================="
	@echo ""
	@echo "üìã Setup Steps:"
	@echo "1. üîß Configure Chrome Extension Permissions"
	@echo "2. ‚òÅÔ∏è  Setup Google Cloud Console"
	@echo "3. üîë Configure OAuth Client ID"
	@echo "4. üöÄ Use BookmarkFormWithGemini component"
	@echo ""
	@echo "üîß Required Permissions (manifest.json):"
	@echo "   ‚Ä¢ \"identity\" - Chrome identity API"
	@echo "   ‚Ä¢ \"https://generativelanguage.googleapis.com/*\""
	@echo ""
	@echo "‚òÅÔ∏è  Google Cloud Console:"
	@echo "   1. Visit: https://console.cloud.google.com/"
	@echo "   2. Enable Generative Language API"
	@echo "   3. Create OAuth 2.0 Client ID (Chrome Extension)"
	@echo "   4. Add extension ID to authorized origins"
	@echo ""
	@echo "üîë OAuth Configuration:"
	@echo "   ‚Ä¢ Client ID ‚Üí manifest.json oauth2.client_id"
	@echo "   ‚Ä¢ Scopes: https://www.googleapis.com/auth/generative-language"
	@echo ""
	@echo "‚ú® Advantages:"
	@echo "   ‚Ä¢ No backend server required"
	@echo "   ‚Ä¢ Uses user's Google account authentication"
	@echo "   ‚Ä¢ Secure OAuth token-based access"
	@echo "   ‚Ä¢ No API keys stored in extension"
	@echo ""
	@echo "üìñ Full guide: examples/README-Gemini.md"
	@echo "üìù Example: examples/BookmarkFormWithGemini.tsx"

examples:
	@echo "üìö EXEMPLOS DISPON√çVEIS - CHRONOMARK"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "ü§ñ INTEGRA√á√ÉO COM IA:"
	@echo "   üìÑ examples/BookmarkFormWithAI.tsx"
	@echo "      ‚îî‚îÄ Formul√°rio com sugest√µes autom√°ticas de tags (regras locais)"
	@echo "      ‚îî‚îÄ Sistema de confian√ßa e m√∫ltiplas fontes"
	@echo "      ‚îî‚îÄ Interface intuitiva para aceitar sugest√µes"
	@echo ""
	@echo "   üìÑ examples/BookmarkFormWithGemini.tsx"
	@echo "      ‚îî‚îÄ Integra√ß√£o com Google Gemini AI"
	@echo "      ‚îî‚îÄ Autentica√ß√£o via Chrome identity API"
	@echo "      ‚îî‚îÄ Sem servidor backend necess√°rio"
	@echo ""
	@echo "   üìÑ examples/BookmarkFormWithHuggingFace.tsx"
	@echo "      ‚îî‚îÄ Integra√ß√£o com Hugging Face AI"
	@echo "      ‚îî‚îÄ Sugest√µes de tags usando modelos de linguagem"
	@echo "      ‚îî‚îÄ Proxy backend para seguran√ßa"
	@echo ""
	@echo "üîß SERVI√áOS:"
	@echo "   üìÑ services/smartTaggingService.ts"
	@echo "      ‚îî‚îÄ Sistema de IA baseado em regras"
	@echo "      ‚îî‚îÄ An√°lise de dom√≠nio, palavras-chave e URL"
	@echo "      ‚îî‚îÄ Sem necessidade de APIs externas"
	@echo ""
	@echo "   üìÑ services/geminiService.ts"
	@echo "      ‚îî‚îÄ Servi√ßo para Google Gemini AI"
	@echo "      ‚îî‚îÄ Autentica√ß√£o OAuth via Chrome identity API"
	@echo "      ‚îî‚îÄ Sem servidor backend necess√°rio"
	@echo ""
	@echo "   üìÑ services/huggingFaceService.ts"
	@echo "      ‚îî‚îÄ Servi√ßo para API Hugging Face"
	@echo "      ‚îî‚îÄ Comunica√ß√£o segura via proxy"
	@echo ""
	@echo "   üìÑ examples/huggingface-proxy-backend.js"
	@echo "      ‚îî‚îÄ Servidor proxy seguro para Hugging Face"
	@echo "      ‚îî‚îÄ Protege chaves de API"
	@echo ""
	@echo "üí° COMO USAR:"
	@echo "   1. Copie os arquivos para seu projeto"
	@echo "   2. Para regras locais: use BookmarkFormWithAI"
	@echo "   3. Para Google Gemini: make gemini-setup"
	@echo "   4. Para Hugging Face: make huggingface-setup"
	@echo "   5. Personalize as configura√ß√µes conforme necess√°rio"
	@echo ""
	@echo "üìñ Documenta√ß√£o:"
	@echo "   ‚Ä¢ examples/README.md"
	@echo "   ‚Ä¢ examples/README-Gemini.md"
	@echo "   ‚Ä¢ examples/README-HuggingFace.md"
	@echo "ü§ñ Configura√ß√£o: make ai-setup"

# Show help
help:
	@echo "Comandos dispon√≠veis:"
	@echo ""
	@echo "üîß DESENVOLVIMENTO:"
	@echo "  make install          - Instalar depend√™ncias"
	@echo "  make test            - Executar testes"
	@echo "  make test-pr PR=N    - Testar Pull Request #N localmente"
	@echo "  make build           - Construir extens√£o"
	@echo "  make clean           - Limpar arquivos de build"
	@echo "  make dist            - Criar pacote de distribui√ß√£o"
	@echo ""
	@echo "üîê OAUTH:"
	@echo "  make oauth-help      - Mostrar ajuda OAuth"
	@echo "  make oauth-test      - Testar configura√ß√£o OAuth"
	@echo "  make oauth-setup     - Configurar OAuth inicial"
	@echo "  make oauth-extension-id - Mostrar Extension ID"
	@echo "  make oauth-debug     - Diagn√≥stico completo OAuth"
	@echo "  make oauth-troubleshoot - Guia de troubleshooting OAuth"
	@echo "  make oauth-fix-redirect - üö® CORRIGIR Error 400: redirect_uri_mismatch"
	@echo "  make oauth-fix-client-id - üö® CORRIGIR 'bad client id' error"
	@echo "  make oauth-update-client-id CLIENT_ID=xxx - Atualizar Client ID no manifest"
	@echo ""
	@echo "üè™ CHROME WEB STORE:"
	@echo "  make validate-store   - Validar extens√£o para publica√ß√£o"
	@echo "  make prepare-store-assets - Preparar screenshots e assets"
	@echo "  make convert-screenshots    # Converter screenshots SVG para PNG (1280x800)"
	@echo "  make convert-screenshots-small # Converter screenshots SVG para PNG (640x400)"
	@echo "  make generate-store-readme  # Gerar README otimizado para Chrome Web Store"
	@echo "  make privacy-justifications # Justificativas de privacidade para Chrome Web Store"
	@echo "  make publication-checklist  # Checklist para resolver problemas de publica√ß√£o"
	@echo "  make test-instructions      # Instru√ß√µes de teste para equipe Chrome Web Store"
	@echo "  make test-pending           # Como testar extens√£o aguardando aprova√ß√£o"
	@echo "  make ai-setup               # M√©todos para integrar IA sem expor chaves"
	@echo "  make examples               # Mostrar exemplos dispon√≠veis"
	@echo "  make huggingface-setup      # Setup Hugging Face integration"
	@echo "  make huggingface-start      # Start Hugging Face proxy server"
	@echo "  make package         - Criar arquivo .zip para Chrome Web Store"
	@echo "  make store-info      - Informa√ß√µes para listagem"
	@echo "  make store-help      - Guia completo de publica√ß√£o"

# Preview Chrome Web Store assets locally
store-preview:
	@echo "Starting local preview server for store-assets at http://localhost:8081/"
	@echo "Press Ctrl+C to stop the server"
	@cd store-assets && python3 -m http.server 8081
	@echo ""
	@echo "üìÅ Screenshots dispon√≠veis em store-assets/"
	@ls -la store-assets/screenshot-*.png 2>/dev/null || echo "‚ö†Ô∏è  Nenhum PNG encontrado ainda"

convert-screenshots-small:
	@echo "üñºÔ∏è  Convertendo screenshots SVG para PNG (640x400)..."
	@echo ""
	@if command -v inkscape >/dev/null 2>&1; then \
		echo "‚úÖ Inkscape encontrado, convertendo..."; \
		for svg in store-assets/screenshot-*.svg; do \
			if [ -f "$$svg" ]; then \
				png="$${svg%.svg}-small.png"; \
				echo "üì∏ Convertendo $$svg -> $$png (640x400)"; \
				inkscape --export-type=png --export-width=640 --export-height=400 --export-filename="$$png" "$$svg"; \
			fi; \
		done; \
		echo "‚úÖ Screenshots convertidos para PNG (640x400)"; \
	else \
		echo "‚ùå Inkscape n√£o encontrado. Execute 'make convert-screenshots' primeiro"; \
	fi
	@echo ""
	@echo "üìÅ Screenshots pequenos dispon√≠veis em store-assets/"
	@ls -la store-assets/screenshot-*-small.png 2>/dev/null || echo "‚ö†Ô∏è  Nenhum PNG pequeno encontrado ainda"

generate-store-readme:
	@echo "üìù Gerando README otimizado para Chrome Web Store..."
	@echo ""
	@echo "# üîñ ChronoMark - Smart Bookmark Manager" > store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "**Organize, sincronize e encontre seus bookmarks com intelig√™ncia artificial**" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "## ‚ú® Principais Funcionalidades" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "- üè∑Ô∏è **Sistema de Tags Inteligente** - Organize bookmarks por categorias personalizadas" >> store-assets/CHROME_STORE_README.md
	@echo "- ‚òÅÔ∏è **Sincroniza√ß√£o Google Drive** - Seus dados seguros e acess√≠veis em qualquer lugar" >> store-assets/CHROME_STORE_README.md
	@echo "- üîç **Busca Avan√ßada** - Encontre qualquer bookmark instantaneamente" >> store-assets/CHROME_STORE_README.md
	@echo "- ü§ñ **IA Integrada** - Sugest√µes autom√°ticas de tags e organiza√ß√£o" >> store-assets/CHROME_STORE_README.md
	@echo "- üìä **Estat√≠sticas Detalhadas** - Acompanhe seus h√°bitos de navega√ß√£o" >> store-assets/CHROME_STORE_README.md
	@echo "- üîí **Privacidade Total** - Seus dados ficam apenas com voc√™" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "## üöÄ Por que ChronoMark?" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "Cansado de perder bookmarks importantes? ChronoMark transforma o caos dos seus favoritos em uma biblioteca organizada e inteligente." >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Tags Ilimitadas** vs Apenas pastas" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Sincroniza√ß√£o Google Drive** vs Limitada" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Busca com IA** vs Busca b√°sica" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ **Interface Moderna** vs Interface b√°sica" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "## üîí Privacidade e Seguran√ßa" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "- Seus dados ficam apenas com voc√™" >> store-assets/CHROME_STORE_README.md
	@echo "- Sincroniza√ß√£o opcional com Google Drive" >> store-assets/CHROME_STORE_README.md
	@echo "- Nenhum dado √© enviado para servidores externos" >> store-assets/CHROME_STORE_README.md
	@echo "- C√≥digo aberto e audit√°vel" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "---" >> store-assets/CHROME_STORE_README.md
	@echo "" >> store-assets/CHROME_STORE_README.md
	@echo "*Transforme seus bookmarks em uma ferramenta poderosa de produtividade!*" >> store-assets/CHROME_STORE_README.md
	@echo "‚úÖ README otimizado criado em store-assets/CHROME_STORE_README.md"

store-help:
	@echo "üè™ GUIA DE PUBLICA√á√ÉO NA CHROME WEB STORE"
	@echo ""
	@echo "üìã Comandos dispon√≠veis:"
	@echo "   make validate-store     - Validar extens√£o antes da publica√ß√£o"
	@echo "   make prepare-store-assets - Preparar screenshots e assets"
	@echo "   make package           - Criar arquivo ZIP para upload"
	@echo "   make store-info        - Mostrar informa√ß√µes para listagem"
	@echo "   make store-help        - Mostrar esta ajuda"
	@echo ""
	@echo "üìñ Documenta√ß√£o completa: CHROME_STORE_PUBLISHING.md"
	@echo ""
	@echo "üöÄ Processo r√°pido:"
	@echo "   1. make validate-store"
	@echo "   2. make prepare-store-assets (criar screenshots)"
	@echo "   3. make package"
	@echo "   4. Acesse: https://chrome.google.com/webstore/devconsole/"
	@echo "   5. Upload do chronomark-extension.zip"
	@echo ""
	@echo "üí∞ Taxa: $5 USD (√∫nica vez)"
	@echo "‚è±Ô∏è  Revis√£o: 1-3 dias √∫teis"

privacy-justifications:
	@echo "üîí JUSTIFICATIVAS DE PRIVACIDADE - CHROME WEB STORE"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìù PROP√ìSITO √öNICO:"
	@echo "ChronoMark √© um gerenciador inteligente de bookmarks que permite"
	@echo "organizar, sincronizar e encontrar favoritos usando tags e IA."
	@echo ""
	@echo "üîë JUSTIFICATIVAS DE PERMISS√ïES:"
	@echo ""
	@echo "üìö BOOKMARKS:"
	@echo "‚Ä¢ Ler/criar/atualizar bookmarks do Chrome"
	@echo "‚Ä¢ Importar bookmarks existentes"
	@echo "‚Ä¢ Sincronizar entre dispositivos"
	@echo ""
	@echo "üíæ STORAGE:"
	@echo "‚Ä¢ Armazenar configura√ß√µes do usu√°rio"
	@echo "‚Ä¢ Cache de tags e metadados"
	@echo "‚Ä¢ Tokens de autentica√ß√£o (criptografados)"
	@echo ""
	@echo "üÜî IDENTITY:"
	@echo "‚Ä¢ Autentica√ß√£o OAuth2 com Google Drive"
	@echo "‚Ä¢ Tokens tempor√°rios para sincroniza√ß√£o"
	@echo "‚Ä¢ Nenhum dado permanente coletado"
	@echo ""
	@echo "üåê HOST PERMISSIONS (googleapis.com):"
	@echo "‚Ä¢ Comunica√ß√£o com Google Drive API"
	@echo "‚Ä¢ Upload/download de backups"
	@echo "‚Ä¢ Apenas endpoints espec√≠ficos do Google"
	@echo ""
	@echo "‚è∞ ALARMS:"
	@echo "‚Ä¢ Sincroniza√ß√£o autom√°tica peri√≥dica"
	@echo "‚Ä¢ Limpeza de cache tempor√°rio"
	@echo "‚Ä¢ Verifica√ß√£o de integridade"
	@echo ""
	@echo "üìë TABS:"
	@echo "‚Ä¢ Detectar sites j√° marcados"
	@echo "‚Ä¢ Sugerir tags baseadas na p√°gina"
	@echo "‚Ä¢ Facilitar adi√ß√£o r√°pida de bookmarks"
	@echo ""
	@echo "üíª REMOTE CODE:"
	@echo "‚Ä¢ Bibliotecas de IA (Google Gemini)"
	@echo "‚Ä¢ Atualiza√ß√µes de seguran√ßa da API"
	@echo "‚Ä¢ Componentes de interface din√¢micos"
	@echo ""
	@echo "‚úÖ CONFORMIDADE:"
	@echo "‚Ä¢ Nenhum dado pessoal desnecess√°rio coletado"
	@echo "‚Ä¢ Dados ficam no dispositivo/Google Drive pessoal"
	@echo "‚Ä¢ C√≥digo aberto e audit√°vel"
	@echo "‚Ä¢ Conformidade com LGPD/GDPR"
	@echo ""
	@echo "üìÑ Detalhes completos: store-assets/PRIVACY_JUSTIFICATIONS.md"

# Checklist de publica√ß√£o para Chrome Web Store
publication-checklist:
	@echo "‚úÖ CHECKLIST DE PUBLICA√á√ÉO - CHROME WEB STORE"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üö® PROBLEMAS IDENTIFICADOS:"
	@echo "‚Ä¢ Email de contato n√£o configurado/verificado"
	@echo "‚Ä¢ Justificativas de permiss√µes em falta"
	@echo "‚Ä¢ Descri√ß√£o de prop√≥sito √∫nico em falta"
	@echo "‚Ä¢ Certifica√ß√£o de conformidade pendente"
	@echo ""
	@echo "üìã PASSOS PARA RESOLVER:"
	@echo "1. üìß Configurar email no Account tab"
	@echo "2. ‚úâÔ∏è  Verificar email (check inbox)"
	@echo "3. üîí Preencher Privacy practices tab"
	@echo "4. ‚úÖ Marcar certifica√ß√£o de conformidade"
	@echo "5. üíæ Salvar rascunho (Save Draft)"
	@echo "6. üöÄ Submeter para revis√£o"
	@echo ""
	@echo "üìÑ Guia completo: store-assets/PUBLICATION_CHECKLIST.md"
	@echo "üîí Justificativas: make privacy-justifications"

# Instru√ß√µes de teste para Chrome Web Store
test-instructions:
	@echo "üß™ INSTRU√á√ïES DE TESTE - CHROME WEB STORE"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üîê CONTA DE TESTE:"
	@echo "‚Ä¢ Email: chronomark.test@gmail.com"
	@echo "‚Ä¢ Senha: ChromeTest2024!"
	@echo "‚Ä¢ Google Drive: Configurado com OAuth"
	@echo ""
	@echo "üß™ TESTES PRINCIPAIS:"
	@echo "1. üìö Gerenciamento b√°sico de bookmarks"
	@echo "2. üè∑Ô∏è  Sistema de tags e filtragem"
	@echo "3. üîÑ Sincroniza√ß√£o Google Drive (opcional)"
	@echo "4. üé® Interface e usabilidade"
	@echo ""
	@echo "‚è±Ô∏è  TEMPO ESTIMADO: 15-20 minutos"
	@echo "üéØ CRIT√âRIOS: Funcionalidades essenciais + UX"
	@echo ""
	@echo "üìÑ Instru√ß√µes completas: store-assets/TEST_INSTRUCTIONS.md"

# Como testar extens√£o aguardando aprova√ß√£o
test-pending:
	@echo "üß™ TESTAR EXTENS√ÉO AGUARDANDO APROVA√á√ÉO"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìã STATUS: Extens√£o submetida para revis√£o"
	@echo ""
	@echo "üîß M√âTODOS DE TESTE:"
	@echo "1. üíª TESTE LOCAL (Recomendado):"
	@echo "   ‚Ä¢ make package ‚Üí Instalar modo desenvolvedor"
	@echo "   ‚Ä¢ Controle total + teste imediato"
	@echo ""
	@echo "2. üåê LINK DE TESTE (Chrome Web Store):"
	@echo "   ‚Ä¢ Developer Console ‚Üí Preview link"
	@echo "   ‚Ä¢ Limitado durante revis√£o"
	@echo ""
	@echo "3. üë• COMPARTILHAR PACOTE:"
	@echo "   ‚Ä¢ Enviar .zip para testadores"
	@echo "   ‚Ä¢ Instala√ß√£o manual"
	@echo ""
	@echo "‚è≥ TEMPO DE APROVA√á√ÉO: 1-7 dias √∫teis"
	@echo "üìß Monitorar emails da Google para updates"
	@echo ""
	@echo "üìÑ Guia completo: store-assets/TESTING_PENDING_EXTENSION.md"

# Configurar integra√ß√£o com IA
ai-setup:
	@echo "ü§ñ CONFIGURA√á√ÉO DE IA - CHRONOMARK"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìã M√âTODOS DISPON√çVEIS:"
	@echo "1. ü§ñ GOOGLE GEMINI (Recomendado):"
	@echo "   ‚Ä¢ Usa autentica√ß√£o do usu√°rio via Chrome identity API"
	@echo "   ‚Ä¢ Sem servidor backend necess√°rio"
	@echo "   ‚Ä¢ Tokens OAuth seguros"
	@echo "   ‚Ä¢ Exemplo: BookmarkFormWithGemini.tsx"
	@echo ""
	@echo "2. üîí PROXY BACKEND:"
	@echo "   ‚Ä¢ Chaves seguras no servidor"
	@echo "   ‚Ä¢ Controle total sobre uso e limites"
	@echo "   ‚Ä¢ M√∫ltiplos provedores de IA"
	@echo ""
	@echo "3. üÜì APIS GRATUITAS:"
	@echo "   ‚Ä¢ HuggingFace Inference API"
	@echo "   ‚Ä¢ Groq (gratuito com limite)"
	@echo "   ‚Ä¢ Sem chaves expostas na extens√£o"
	@echo ""
	@echo "4. üß† IA LOCAL (WebLLM):"
	@echo "   ‚Ä¢ Processamento no navegador"
	@echo "   ‚Ä¢ Sem depend√™ncias externas"
	@echo "   ‚Ä¢ Privacidade total"
	@echo ""
	@echo "5. üéØ REGRAS INTELIGENTES (Implementado):"
	@echo "   ‚Ä¢ Sistema baseado em dom√≠nios e palavras-chave"
	@echo "   ‚Ä¢ Sem APIs ou chaves necess√°rias"
	@echo "   ‚Ä¢ Performance m√°xima"
	@echo ""
	@echo "üí° RECOMENDA√á√ÉO: Come√ßar com Gemini + Regras como fallback"
	@echo "üîí SEGURAN√áA: Nunca expor chaves no c√≥digo da extens√£o"
	@echo ""
	@echo "üìÑ Guias completos:"
	@echo "   ‚Ä¢ AI_INTEGRATION_GUIDE.md"
	@echo "   ‚Ä¢ examples/README-Gemini.md"
	@echo "   ‚Ä¢ examples/README-HuggingFace.md"
	@echo ""
	@echo "üìù Exemplos pr√°ticos:"
	@echo "   ‚Ä¢ examples/BookmarkFormWithAI.tsx (regras locais)"
	@echo "   ‚Ä¢ examples/BookmarkFormWithGemini.tsx (Gemini AI)"
	@echo "   ‚Ä¢ examples/BookmarkFormWithHuggingFace.tsx (HuggingFace)"
	@echo ""
	@echo "Quick Start Commands:"
	@echo "  make gemini-setup       - Setup Gemini integration"
	@echo "  make huggingface-setup  - Setup Hugging Face integration"
	@echo "  make huggingface-start  - Start Hugging Face proxy server"

store-info:
	@echo "üìã INFORMA√á√ïES PARA CHROME WEB STORE"
	@echo ""
	@echo "üì¶ Nome: ChronoMark - Smart Bookmark Manager"
	@echo "üìã Categoria: Productivity"
	@echo "üåç Idioma: Portugu√™s (Brasil)"
	@echo ""
	@echo "üìÑ Descri√ß√£o Curta:"
	@echo "Organize seus bookmarks com tags inteligentes e sincroniza√ß√£o com Google Drive"
	@echo ""
	@echo "üîó Links importantes:"
	@echo "   üìñ Documenta√ß√£o: store-assets/STORE_LISTING.md"
	@echo "   üîí Pol√≠tica Privacidade: PRIVACY_POLICY.md"
	@echo "   üì¶ Pacote: chronomark-extension.zip"
	@echo ""
	@echo "üì∑  Permiss√µes necess√°rias:"
	@echo "   ‚Ä¢ bookmarks - Gerenciar bookmarks do usu√°rio"
	@echo "   ‚Ä¢ storage - Armazenar configura√ß√µes locais"
	@echo "   ‚Ä¢ identity - Autentica√ß√£o OAuth com Google"
	@echo "   ‚Ä¢ googleapis.com - Sincroniza√ß√£o com Google Drive"
	@echo ""
	@echo "üì∏ Screenshots necess√°rios: 1-5 imagens (1280x800px)"
	@echo "üí° Veja store-assets/STORE_LISTING.md para detalhes completos"

# Hugging Face Integration Commands
huggingface-setup:
	@echo "ü§ñ Hugging Face Integration Setup"
	@echo "================================="
	@echo ""
	@echo "üìã Setup Steps:"
	@echo "1. üìÅ Navigate to examples directory: cd examples"
	@echo "2. üì¶ Install dependencies: npm install"
	@echo "3. üîë Copy environment file: cp .env.example .env"
	@echo "4. ‚úèÔ∏è  Edit .env with your Hugging Face API key"
	@echo "5. üöÄ Start proxy server: make huggingface-start"
	@echo ""
	@echo "üîë Get API Key:"
	@echo "   1. Visit: https://huggingface.co/settings/tokens"
	@echo "   2. Create new token with 'Read' permissions"
	@echo "   3. Copy token to .env file"
	@echo ""
	@echo "üìñ Full guide: examples/README-HuggingFace.md"

huggingface-start:
	@echo "üöÄ Starting Hugging Face Proxy Server..